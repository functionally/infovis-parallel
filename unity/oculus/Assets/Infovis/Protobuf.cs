// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infovis.proto3
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Infovis.Protobuf {

  /// <summary>Holder for reflection information generated from infovis.proto3</summary>
  public static partial class InfovisReflection {

    #region Descriptor
    /// <summary>File descriptor for infovis.proto3</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfovisReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5pbmZvdmlzLnByb3RvMxIHSW5mb3ZpcyKyAQoIR2VvbWV0cnkSDAoEZnJh",
            "bRgBIAEoBRIMCgRpZGVuGAIgASgDEgwKBHR5cGUYAyABKAUSDAoEbWFzaxgE",
            "IAEoBRIMCgRjbnRzGAUgAygFEgwKBHBvc3gYBiADKAESDAoEcG9zeRgHIAMo",
            "ARIMCgRwb3N6GAggAygBEgwKBHNpemUYCSABKAESDAoEY29schgKIAEoBxIM",
            "CgR0ZXh0GAsgASgJEgwKBGdseXAYDCABKAUibAoITG9jYXRpb24SDAoEcG9z",
            "eBgBIAEoARIMCgRwb3N5GAIgASgBEgwKBHBvc3oYAyABKAESDAoEcm90dxgE",
            "IAEoARIMCgRyb3R4GAUgASgBEgwKBHJvdHkYBiABKAESDAoEcm90ehgHIAEo",
            "ASLYAQoHUmVxdWVzdBIMCgRzaG93GAEgASgFEg8KB21lc3NhZ2UYAiABKAkS",
            "DQoFcmVzZXQYAyABKAgSIQoGdXBzZXJ0GAQgAygLMhEuSW5mb3Zpcy5HZW9t",
            "ZXRyeRIOCgZkZWxldGUYBSADKAMSIgoHdmlld2xvYxgGIAEoCzIRLkluZm92",
            "aXMuTG9jYXRpb24SIgoHdG9vbGxvYxgHIAEoCzIRLkluZm92aXMuTG9jYXRp",
            "b24SJAoJb2Zmc2V0bG9jGAggASgLMhEuSW5mb3Zpcy5Mb2NhdGlvbiL6AQoI",
            "UmVzcG9uc2USDQoFc2hvd24YASABKAUSDwoHbWVzc2FnZRgCIAEoCRINCgVo",
            "b3ZlchgDIAMoAxIPCgd1bmhvdmVyGAQgAygDEg4KBnNlbGVjdBgFIAMoAxIQ",
            "CghkZXNlbGVjdBgGIAMoAxIiCgd2aWV3bG9jGAcgASgLMhEuSW5mb3Zpcy5M",
            "b2NhdGlvbhIiCgd0b29sbG9jGAggASgLMhEuSW5mb3Zpcy5Mb2NhdGlvbhIR",
            "CglkZXByZXNzZWQYCSABKAcSDwoHcHJlc3NlZBgKIAEoBxIQCghyZWxlYXNl",
            "ZBgLIAEoBxIOCgZhbmFsb2cYDCADKAFCE6oCEEluZm92aXMuUHJvdG9idWZi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Infovis.Protobuf.Geometry), global::Infovis.Protobuf.Geometry.Parser, new[]{ "Fram", "Iden", "Type", "Mask", "Cnts", "Posx", "Posy", "Posz", "Size", "Colr", "Text", "Glyp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Infovis.Protobuf.Location), global::Infovis.Protobuf.Location.Parser, new[]{ "Posx", "Posy", "Posz", "Rotw", "Rotx", "Roty", "Rotz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Infovis.Protobuf.Request), global::Infovis.Protobuf.Request.Parser, new[]{ "Show", "Message", "Reset", "Upsert", "Delete", "Viewloc", "Toolloc", "Offsetloc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Infovis.Protobuf.Response), global::Infovis.Protobuf.Response.Parser, new[]{ "Shown", "Message", "Hover", "Unhover", "Select", "Deselect", "Viewloc", "Toolloc", "Depressed", "Pressed", "Released", "Analog" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Geometry : pb::IMessage<Geometry> {
    private static readonly pb::MessageParser<Geometry> _parser = new pb::MessageParser<Geometry>(() => new Geometry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Geometry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Infovis.Protobuf.InfovisReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Geometry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Geometry(Geometry other) : this() {
      fram_ = other.fram_;
      iden_ = other.iden_;
      type_ = other.type_;
      mask_ = other.mask_;
      cnts_ = other.cnts_.Clone();
      posx_ = other.posx_.Clone();
      posy_ = other.posy_.Clone();
      posz_ = other.posz_.Clone();
      size_ = other.size_;
      colr_ = other.colr_;
      text_ = other.text_;
      glyp_ = other.glyp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Geometry Clone() {
      return new Geometry(this);
    }

    /// <summary>Field number for the "fram" field.</summary>
    public const int FramFieldNumber = 1;
    private int fram_;
    /// <summary>
    /// 0 = all
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fram {
      get { return fram_; }
      set {
        fram_ = value;
      }
    }

    /// <summary>Field number for the "iden" field.</summary>
    public const int IdenFieldNumber = 2;
    private long iden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Iden {
      get { return iden_; }
      set {
        iden_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 0 = all, 1 = points, 2 = polylines, 3 = rectangles, 4 = label, 5 = axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 4;
    private int mask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "cnts" field.</summary>
    public const int CntsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_cnts_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> cnts_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cnts {
      get { return cnts_; }
    }

    /// <summary>Field number for the "posx" field.</summary>
    public const int PosxFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_posx_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> posx_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// mask = 00001b = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Posx {
      get { return posx_; }
    }

    /// <summary>Field number for the "posy" field.</summary>
    public const int PosyFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_posy_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> posy_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// mask = 00001b = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Posy {
      get { return posy_; }
    }

    /// <summary>Field number for the "posz" field.</summary>
    public const int PoszFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_posz_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> posz_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// mask = 00001b = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Posz {
      get { return posz_; }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 9;
    private double size_;
    /// <summary>
    /// mask = 00010b = 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "colr" field.</summary>
    public const int ColrFieldNumber = 10;
    private uint colr_;
    /// <summary>
    /// mask = 00100b = 4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Colr {
      get { return colr_; }
      set {
        colr_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 11;
    private string text_ = "";
    /// <summary>
    /// mask = 01000b = 8
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "glyp" field.</summary>
    public const int GlypFieldNumber = 12;
    private int glyp_;
    /// <summary>
    /// mask = 10000b = 16; 0 = cubes/boxes for points/polylines, 1 = spheres/cylinders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Glyp {
      get { return glyp_; }
      set {
        glyp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Geometry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Geometry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fram != other.Fram) return false;
      if (Iden != other.Iden) return false;
      if (Type != other.Type) return false;
      if (Mask != other.Mask) return false;
      if(!cnts_.Equals(other.cnts_)) return false;
      if(!posx_.Equals(other.posx_)) return false;
      if(!posy_.Equals(other.posy_)) return false;
      if(!posz_.Equals(other.posz_)) return false;
      if (Size != other.Size) return false;
      if (Colr != other.Colr) return false;
      if (Text != other.Text) return false;
      if (Glyp != other.Glyp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fram != 0) hash ^= Fram.GetHashCode();
      if (Iden != 0L) hash ^= Iden.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Mask != 0) hash ^= Mask.GetHashCode();
      hash ^= cnts_.GetHashCode();
      hash ^= posx_.GetHashCode();
      hash ^= posy_.GetHashCode();
      hash ^= posz_.GetHashCode();
      if (Size != 0D) hash ^= Size.GetHashCode();
      if (Colr != 0) hash ^= Colr.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Glyp != 0) hash ^= Glyp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fram != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Fram);
      }
      if (Iden != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Iden);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Mask != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mask);
      }
      cnts_.WriteTo(output, _repeated_cnts_codec);
      posx_.WriteTo(output, _repeated_posx_codec);
      posy_.WriteTo(output, _repeated_posy_codec);
      posz_.WriteTo(output, _repeated_posz_codec);
      if (Size != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Size);
      }
      if (Colr != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Colr);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Text);
      }
      if (Glyp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Glyp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fram != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fram);
      }
      if (Iden != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Iden);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Mask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mask);
      }
      size += cnts_.CalculateSize(_repeated_cnts_codec);
      size += posx_.CalculateSize(_repeated_posx_codec);
      size += posy_.CalculateSize(_repeated_posy_codec);
      size += posz_.CalculateSize(_repeated_posz_codec);
      if (Size != 0D) {
        size += 1 + 8;
      }
      if (Colr != 0) {
        size += 1 + 4;
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Glyp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Glyp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Geometry other) {
      if (other == null) {
        return;
      }
      if (other.Fram != 0) {
        Fram = other.Fram;
      }
      if (other.Iden != 0L) {
        Iden = other.Iden;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Mask != 0) {
        Mask = other.Mask;
      }
      cnts_.Add(other.cnts_);
      posx_.Add(other.posx_);
      posy_.Add(other.posy_);
      posz_.Add(other.posz_);
      if (other.Size != 0D) {
        Size = other.Size;
      }
      if (other.Colr != 0) {
        Colr = other.Colr;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Glyp != 0) {
        Glyp = other.Glyp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fram = input.ReadInt32();
            break;
          }
          case 16: {
            Iden = input.ReadInt64();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Mask = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            cnts_.AddEntriesFrom(input, _repeated_cnts_codec);
            break;
          }
          case 50:
          case 49: {
            posx_.AddEntriesFrom(input, _repeated_posx_codec);
            break;
          }
          case 58:
          case 57: {
            posy_.AddEntriesFrom(input, _repeated_posy_codec);
            break;
          }
          case 66:
          case 65: {
            posz_.AddEntriesFrom(input, _repeated_posz_codec);
            break;
          }
          case 73: {
            Size = input.ReadDouble();
            break;
          }
          case 85: {
            Colr = input.ReadFixed32();
            break;
          }
          case 90: {
            Text = input.ReadString();
            break;
          }
          case 96: {
            Glyp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Infovis.Protobuf.InfovisReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      posx_ = other.posx_;
      posy_ = other.posy_;
      posz_ = other.posz_;
      rotw_ = other.rotw_;
      rotx_ = other.rotx_;
      roty_ = other.roty_;
      rotz_ = other.rotz_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "posx" field.</summary>
    public const int PosxFieldNumber = 1;
    private double posx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Posx {
      get { return posx_; }
      set {
        posx_ = value;
      }
    }

    /// <summary>Field number for the "posy" field.</summary>
    public const int PosyFieldNumber = 2;
    private double posy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Posy {
      get { return posy_; }
      set {
        posy_ = value;
      }
    }

    /// <summary>Field number for the "posz" field.</summary>
    public const int PoszFieldNumber = 3;
    private double posz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Posz {
      get { return posz_; }
      set {
        posz_ = value;
      }
    }

    /// <summary>Field number for the "rotw" field.</summary>
    public const int RotwFieldNumber = 4;
    private double rotw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rotw {
      get { return rotw_; }
      set {
        rotw_ = value;
      }
    }

    /// <summary>Field number for the "rotx" field.</summary>
    public const int RotxFieldNumber = 5;
    private double rotx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rotx {
      get { return rotx_; }
      set {
        rotx_ = value;
      }
    }

    /// <summary>Field number for the "roty" field.</summary>
    public const int RotyFieldNumber = 6;
    private double roty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roty {
      get { return roty_; }
      set {
        roty_ = value;
      }
    }

    /// <summary>Field number for the "rotz" field.</summary>
    public const int RotzFieldNumber = 7;
    private double rotz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rotz {
      get { return rotz_; }
      set {
        rotz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Posx != other.Posx) return false;
      if (Posy != other.Posy) return false;
      if (Posz != other.Posz) return false;
      if (Rotw != other.Rotw) return false;
      if (Rotx != other.Rotx) return false;
      if (Roty != other.Roty) return false;
      if (Rotz != other.Rotz) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Posx != 0D) hash ^= Posx.GetHashCode();
      if (Posy != 0D) hash ^= Posy.GetHashCode();
      if (Posz != 0D) hash ^= Posz.GetHashCode();
      if (Rotw != 0D) hash ^= Rotw.GetHashCode();
      if (Rotx != 0D) hash ^= Rotx.GetHashCode();
      if (Roty != 0D) hash ^= Roty.GetHashCode();
      if (Rotz != 0D) hash ^= Rotz.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Posx != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Posx);
      }
      if (Posy != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Posy);
      }
      if (Posz != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Posz);
      }
      if (Rotw != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Rotw);
      }
      if (Rotx != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Rotx);
      }
      if (Roty != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Roty);
      }
      if (Rotz != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Rotz);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Posx != 0D) {
        size += 1 + 8;
      }
      if (Posy != 0D) {
        size += 1 + 8;
      }
      if (Posz != 0D) {
        size += 1 + 8;
      }
      if (Rotw != 0D) {
        size += 1 + 8;
      }
      if (Rotx != 0D) {
        size += 1 + 8;
      }
      if (Roty != 0D) {
        size += 1 + 8;
      }
      if (Rotz != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Posx != 0D) {
        Posx = other.Posx;
      }
      if (other.Posy != 0D) {
        Posy = other.Posy;
      }
      if (other.Posz != 0D) {
        Posz = other.Posz;
      }
      if (other.Rotw != 0D) {
        Rotw = other.Rotw;
      }
      if (other.Rotx != 0D) {
        Rotx = other.Rotx;
      }
      if (other.Roty != 0D) {
        Roty = other.Roty;
      }
      if (other.Rotz != 0D) {
        Rotz = other.Rotz;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Posx = input.ReadDouble();
            break;
          }
          case 17: {
            Posy = input.ReadDouble();
            break;
          }
          case 25: {
            Posz = input.ReadDouble();
            break;
          }
          case 33: {
            Rotw = input.ReadDouble();
            break;
          }
          case 41: {
            Rotx = input.ReadDouble();
            break;
          }
          case 49: {
            Roty = input.ReadDouble();
            break;
          }
          case 57: {
            Rotz = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Infovis.Protobuf.InfovisReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      show_ = other.show_;
      message_ = other.message_;
      reset_ = other.reset_;
      upsert_ = other.upsert_.Clone();
      delete_ = other.delete_.Clone();
      Viewloc = other.viewloc_ != null ? other.Viewloc.Clone() : null;
      Toolloc = other.toolloc_ != null ? other.Toolloc.Clone() : null;
      Offsetloc = other.offsetloc_ != null ? other.Offsetloc.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private int show_;
    /// <summary>
    /// 0 = no change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reset" field.</summary>
    public const int ResetFieldNumber = 3;
    private bool reset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reset {
      get { return reset_; }
      set {
        reset_ = value;
      }
    }

    /// <summary>Field number for the "upsert" field.</summary>
    public const int UpsertFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Infovis.Protobuf.Geometry> _repeated_upsert_codec
        = pb::FieldCodec.ForMessage(34, global::Infovis.Protobuf.Geometry.Parser);
    private readonly pbc::RepeatedField<global::Infovis.Protobuf.Geometry> upsert_ = new pbc::RepeatedField<global::Infovis.Protobuf.Geometry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Infovis.Protobuf.Geometry> Upsert {
      get { return upsert_; }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_delete_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> delete_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Delete {
      get { return delete_; }
    }

    /// <summary>Field number for the "viewloc" field.</summary>
    public const int ViewlocFieldNumber = 6;
    private global::Infovis.Protobuf.Location viewloc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Infovis.Protobuf.Location Viewloc {
      get { return viewloc_; }
      set {
        viewloc_ = value;
      }
    }

    /// <summary>Field number for the "toolloc" field.</summary>
    public const int ToollocFieldNumber = 7;
    private global::Infovis.Protobuf.Location toolloc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Infovis.Protobuf.Location Toolloc {
      get { return toolloc_; }
      set {
        toolloc_ = value;
      }
    }

    /// <summary>Field number for the "offsetloc" field.</summary>
    public const int OffsetlocFieldNumber = 8;
    private global::Infovis.Protobuf.Location offsetloc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Infovis.Protobuf.Location Offsetloc {
      get { return offsetloc_; }
      set {
        offsetloc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Show != other.Show) return false;
      if (Message != other.Message) return false;
      if (Reset != other.Reset) return false;
      if(!upsert_.Equals(other.upsert_)) return false;
      if(!delete_.Equals(other.delete_)) return false;
      if (!object.Equals(Viewloc, other.Viewloc)) return false;
      if (!object.Equals(Toolloc, other.Toolloc)) return false;
      if (!object.Equals(Offsetloc, other.Offsetloc)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Show != 0) hash ^= Show.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Reset != false) hash ^= Reset.GetHashCode();
      hash ^= upsert_.GetHashCode();
      hash ^= delete_.GetHashCode();
      if (viewloc_ != null) hash ^= Viewloc.GetHashCode();
      if (toolloc_ != null) hash ^= Toolloc.GetHashCode();
      if (offsetloc_ != null) hash ^= Offsetloc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Show != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Show);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (Reset != false) {
        output.WriteRawTag(24);
        output.WriteBool(Reset);
      }
      upsert_.WriteTo(output, _repeated_upsert_codec);
      delete_.WriteTo(output, _repeated_delete_codec);
      if (viewloc_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Viewloc);
      }
      if (toolloc_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Toolloc);
      }
      if (offsetloc_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Offsetloc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Show != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Show);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Reset != false) {
        size += 1 + 1;
      }
      size += upsert_.CalculateSize(_repeated_upsert_codec);
      size += delete_.CalculateSize(_repeated_delete_codec);
      if (viewloc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Viewloc);
      }
      if (toolloc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Toolloc);
      }
      if (offsetloc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offsetloc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Show != 0) {
        Show = other.Show;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Reset != false) {
        Reset = other.Reset;
      }
      upsert_.Add(other.upsert_);
      delete_.Add(other.delete_);
      if (other.viewloc_ != null) {
        if (viewloc_ == null) {
          viewloc_ = new global::Infovis.Protobuf.Location();
        }
        Viewloc.MergeFrom(other.Viewloc);
      }
      if (other.toolloc_ != null) {
        if (toolloc_ == null) {
          toolloc_ = new global::Infovis.Protobuf.Location();
        }
        Toolloc.MergeFrom(other.Toolloc);
      }
      if (other.offsetloc_ != null) {
        if (offsetloc_ == null) {
          offsetloc_ = new global::Infovis.Protobuf.Location();
        }
        Offsetloc.MergeFrom(other.Offsetloc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Show = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            Reset = input.ReadBool();
            break;
          }
          case 34: {
            upsert_.AddEntriesFrom(input, _repeated_upsert_codec);
            break;
          }
          case 42:
          case 40: {
            delete_.AddEntriesFrom(input, _repeated_delete_codec);
            break;
          }
          case 50: {
            if (viewloc_ == null) {
              viewloc_ = new global::Infovis.Protobuf.Location();
            }
            input.ReadMessage(viewloc_);
            break;
          }
          case 58: {
            if (toolloc_ == null) {
              toolloc_ = new global::Infovis.Protobuf.Location();
            }
            input.ReadMessage(toolloc_);
            break;
          }
          case 66: {
            if (offsetloc_ == null) {
              offsetloc_ = new global::Infovis.Protobuf.Location();
            }
            input.ReadMessage(offsetloc_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Infovis.Protobuf.InfovisReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      shown_ = other.shown_;
      message_ = other.message_;
      hover_ = other.hover_.Clone();
      unhover_ = other.unhover_.Clone();
      select_ = other.select_.Clone();
      deselect_ = other.deselect_.Clone();
      Viewloc = other.viewloc_ != null ? other.Viewloc.Clone() : null;
      Toolloc = other.toolloc_ != null ? other.Toolloc.Clone() : null;
      depressed_ = other.depressed_;
      pressed_ = other.pressed_;
      released_ = other.released_;
      analog_ = other.analog_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "shown" field.</summary>
    public const int ShownFieldNumber = 1;
    private int shown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shown {
      get { return shown_; }
      set {
        shown_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hover" field.</summary>
    public const int HoverFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_hover_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> hover_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Hover {
      get { return hover_; }
    }

    /// <summary>Field number for the "unhover" field.</summary>
    public const int UnhoverFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_unhover_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> unhover_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Unhover {
      get { return unhover_; }
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_select_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> select_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Select {
      get { return select_; }
    }

    /// <summary>Field number for the "deselect" field.</summary>
    public const int DeselectFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_deselect_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> deselect_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Deselect {
      get { return deselect_; }
    }

    /// <summary>Field number for the "viewloc" field.</summary>
    public const int ViewlocFieldNumber = 7;
    private global::Infovis.Protobuf.Location viewloc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Infovis.Protobuf.Location Viewloc {
      get { return viewloc_; }
      set {
        viewloc_ = value;
      }
    }

    /// <summary>Field number for the "toolloc" field.</summary>
    public const int ToollocFieldNumber = 8;
    private global::Infovis.Protobuf.Location toolloc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Infovis.Protobuf.Location Toolloc {
      get { return toolloc_; }
      set {
        toolloc_ = value;
      }
    }

    /// <summary>Field number for the "depressed" field.</summary>
    public const int DepressedFieldNumber = 9;
    private uint depressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Depressed {
      get { return depressed_; }
      set {
        depressed_ = value;
      }
    }

    /// <summary>Field number for the "pressed" field.</summary>
    public const int PressedFieldNumber = 10;
    private uint pressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pressed {
      get { return pressed_; }
      set {
        pressed_ = value;
      }
    }

    /// <summary>Field number for the "released" field.</summary>
    public const int ReleasedFieldNumber = 11;
    private uint released_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Released {
      get { return released_; }
      set {
        released_ = value;
      }
    }

    /// <summary>Field number for the "analog" field.</summary>
    public const int AnalogFieldNumber = 12;
    private static readonly pb::FieldCodec<double> _repeated_analog_codec
        = pb::FieldCodec.ForDouble(98);
    private readonly pbc::RepeatedField<double> analog_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Analog {
      get { return analog_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shown != other.Shown) return false;
      if (Message != other.Message) return false;
      if(!hover_.Equals(other.hover_)) return false;
      if(!unhover_.Equals(other.unhover_)) return false;
      if(!select_.Equals(other.select_)) return false;
      if(!deselect_.Equals(other.deselect_)) return false;
      if (!object.Equals(Viewloc, other.Viewloc)) return false;
      if (!object.Equals(Toolloc, other.Toolloc)) return false;
      if (Depressed != other.Depressed) return false;
      if (Pressed != other.Pressed) return false;
      if (Released != other.Released) return false;
      if(!analog_.Equals(other.analog_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shown != 0) hash ^= Shown.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= hover_.GetHashCode();
      hash ^= unhover_.GetHashCode();
      hash ^= select_.GetHashCode();
      hash ^= deselect_.GetHashCode();
      if (viewloc_ != null) hash ^= Viewloc.GetHashCode();
      if (toolloc_ != null) hash ^= Toolloc.GetHashCode();
      if (Depressed != 0) hash ^= Depressed.GetHashCode();
      if (Pressed != 0) hash ^= Pressed.GetHashCode();
      if (Released != 0) hash ^= Released.GetHashCode();
      hash ^= analog_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Shown != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Shown);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      hover_.WriteTo(output, _repeated_hover_codec);
      unhover_.WriteTo(output, _repeated_unhover_codec);
      select_.WriteTo(output, _repeated_select_codec);
      deselect_.WriteTo(output, _repeated_deselect_codec);
      if (viewloc_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Viewloc);
      }
      if (toolloc_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Toolloc);
      }
      if (Depressed != 0) {
        output.WriteRawTag(77);
        output.WriteFixed32(Depressed);
      }
      if (Pressed != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Pressed);
      }
      if (Released != 0) {
        output.WriteRawTag(93);
        output.WriteFixed32(Released);
      }
      analog_.WriteTo(output, _repeated_analog_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shown);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += hover_.CalculateSize(_repeated_hover_codec);
      size += unhover_.CalculateSize(_repeated_unhover_codec);
      size += select_.CalculateSize(_repeated_select_codec);
      size += deselect_.CalculateSize(_repeated_deselect_codec);
      if (viewloc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Viewloc);
      }
      if (toolloc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Toolloc);
      }
      if (Depressed != 0) {
        size += 1 + 4;
      }
      if (Pressed != 0) {
        size += 1 + 4;
      }
      if (Released != 0) {
        size += 1 + 4;
      }
      size += analog_.CalculateSize(_repeated_analog_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Shown != 0) {
        Shown = other.Shown;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      hover_.Add(other.hover_);
      unhover_.Add(other.unhover_);
      select_.Add(other.select_);
      deselect_.Add(other.deselect_);
      if (other.viewloc_ != null) {
        if (viewloc_ == null) {
          viewloc_ = new global::Infovis.Protobuf.Location();
        }
        Viewloc.MergeFrom(other.Viewloc);
      }
      if (other.toolloc_ != null) {
        if (toolloc_ == null) {
          toolloc_ = new global::Infovis.Protobuf.Location();
        }
        Toolloc.MergeFrom(other.Toolloc);
      }
      if (other.Depressed != 0) {
        Depressed = other.Depressed;
      }
      if (other.Pressed != 0) {
        Pressed = other.Pressed;
      }
      if (other.Released != 0) {
        Released = other.Released;
      }
      analog_.Add(other.analog_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Shown = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            hover_.AddEntriesFrom(input, _repeated_hover_codec);
            break;
          }
          case 34:
          case 32: {
            unhover_.AddEntriesFrom(input, _repeated_unhover_codec);
            break;
          }
          case 42:
          case 40: {
            select_.AddEntriesFrom(input, _repeated_select_codec);
            break;
          }
          case 50:
          case 48: {
            deselect_.AddEntriesFrom(input, _repeated_deselect_codec);
            break;
          }
          case 58: {
            if (viewloc_ == null) {
              viewloc_ = new global::Infovis.Protobuf.Location();
            }
            input.ReadMessage(viewloc_);
            break;
          }
          case 66: {
            if (toolloc_ == null) {
              toolloc_ = new global::Infovis.Protobuf.Location();
            }
            input.ReadMessage(toolloc_);
            break;
          }
          case 77: {
            Depressed = input.ReadFixed32();
            break;
          }
          case 85: {
            Pressed = input.ReadFixed32();
            break;
          }
          case 93: {
            Released = input.ReadFixed32();
            break;
          }
          case 98:
          case 97: {
            analog_.AddEntriesFrom(input, _repeated_analog_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
