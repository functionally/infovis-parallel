/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Infovis.Request');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.Infovis.Geometry');
goog.require('proto.Infovis.Location');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Infovis.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Infovis.Request.repeatedFields_, null);
};
goog.inherits(proto.Infovis.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Infovis.Request.displayName = 'proto.Infovis.Request';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Infovis.Request.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Infovis.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Infovis.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Infovis.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Infovis.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    show: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reset: jspb.Message.getFieldWithDefault(msg, 3, false),
    upsertList: jspb.Message.toObjectList(msg.getUpsertList(),
    proto.Infovis.Geometry.toObject, includeInstance),
    deleteList: jspb.Message.getRepeatedField(msg, 5),
    viewloc: (f = msg.getViewloc()) && proto.Infovis.Location.toObject(includeInstance, f),
    toolloc: (f = msg.getToolloc()) && proto.Infovis.Location.toObject(includeInstance, f),
    offsetloc: (f = msg.getOffsetloc()) && proto.Infovis.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Infovis.Request}
 */
proto.Infovis.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Infovis.Request;
  return proto.Infovis.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Infovis.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Infovis.Request}
 */
proto.Infovis.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShow(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 4:
      var value = new proto.Infovis.Geometry;
      reader.readMessage(value,proto.Infovis.Geometry.deserializeBinaryFromReader);
      msg.addUpsert(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setDeleteList(value);
      break;
    case 6:
      var value = new proto.Infovis.Location;
      reader.readMessage(value,proto.Infovis.Location.deserializeBinaryFromReader);
      msg.setViewloc(value);
      break;
    case 7:
      var value = new proto.Infovis.Location;
      reader.readMessage(value,proto.Infovis.Location.deserializeBinaryFromReader);
      msg.setToolloc(value);
      break;
    case 8:
      var value = new proto.Infovis.Location;
      reader.readMessage(value,proto.Infovis.Location.deserializeBinaryFromReader);
      msg.setOffsetloc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Infovis.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Infovis.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Infovis.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Infovis.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReset();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUpsertList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Infovis.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getDeleteList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getViewloc();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Infovis.Location.serializeBinaryToWriter
    );
  }
  f = message.getToolloc();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Infovis.Location.serializeBinaryToWriter
    );
  }
  f = message.getOffsetloc();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Infovis.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 show = 1;
 * @return {number}
 */
proto.Infovis.Request.prototype.getShow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Infovis.Request.prototype.setShow = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.Infovis.Request.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Infovis.Request.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool reset = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Infovis.Request.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Infovis.Request.prototype.setReset = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated Geometry upsert = 4;
 * @return {!Array<!proto.Infovis.Geometry>}
 */
proto.Infovis.Request.prototype.getUpsertList = function() {
  return /** @type{!Array<!proto.Infovis.Geometry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Infovis.Geometry, 4));
};


/** @param {!Array<!proto.Infovis.Geometry>} value */
proto.Infovis.Request.prototype.setUpsertList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Infovis.Geometry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Infovis.Geometry}
 */
proto.Infovis.Request.prototype.addUpsert = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Infovis.Geometry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Infovis.Request.prototype.clearUpsertList = function() {
  this.setUpsertList([]);
};


/**
 * repeated int64 delete = 5;
 * @return {!Array<number>}
 */
proto.Infovis.Request.prototype.getDeleteList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.Infovis.Request.prototype.setDeleteList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Infovis.Request.prototype.addDelete = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Infovis.Request.prototype.clearDeleteList = function() {
  this.setDeleteList([]);
};


/**
 * optional Location viewloc = 6;
 * @return {?proto.Infovis.Location}
 */
proto.Infovis.Request.prototype.getViewloc = function() {
  return /** @type{?proto.Infovis.Location} */ (
    jspb.Message.getWrapperField(this, proto.Infovis.Location, 6));
};


/** @param {?proto.Infovis.Location|undefined} value */
proto.Infovis.Request.prototype.setViewloc = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Infovis.Request.prototype.clearViewloc = function() {
  this.setViewloc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Infovis.Request.prototype.hasViewloc = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Location toolloc = 7;
 * @return {?proto.Infovis.Location}
 */
proto.Infovis.Request.prototype.getToolloc = function() {
  return /** @type{?proto.Infovis.Location} */ (
    jspb.Message.getWrapperField(this, proto.Infovis.Location, 7));
};


/** @param {?proto.Infovis.Location|undefined} value */
proto.Infovis.Request.prototype.setToolloc = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Infovis.Request.prototype.clearToolloc = function() {
  this.setToolloc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Infovis.Request.prototype.hasToolloc = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Location offsetloc = 8;
 * @return {?proto.Infovis.Location}
 */
proto.Infovis.Request.prototype.getOffsetloc = function() {
  return /** @type{?proto.Infovis.Location} */ (
    jspb.Message.getWrapperField(this, proto.Infovis.Location, 8));
};


/** @param {?proto.Infovis.Location|undefined} value */
proto.Infovis.Request.prototype.setOffsetloc = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Infovis.Request.prototype.clearOffsetloc = function() {
  this.setOffsetloc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Infovis.Request.prototype.hasOffsetloc = function() {
  return jspb.Message.getField(this, 8) != null;
};


