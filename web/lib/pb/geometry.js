/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Infovis.Geometry');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Infovis.Geometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Infovis.Geometry.repeatedFields_, null);
};
goog.inherits(proto.Infovis.Geometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Infovis.Geometry.displayName = 'proto.Infovis.Geometry';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Infovis.Geometry.repeatedFields_ = [5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Infovis.Geometry.prototype.toObject = function(opt_includeInstance) {
  return proto.Infovis.Geometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Infovis.Geometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Infovis.Geometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    fram: jspb.Message.getFieldWithDefault(msg, 1, 0),
    iden: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mask: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cntsList: jspb.Message.getRepeatedField(msg, 5),
    posxList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    posyList: jspb.Message.getRepeatedFloatingPointField(msg, 7),
    poszList: jspb.Message.getRepeatedFloatingPointField(msg, 8),
    size: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    colr: jspb.Message.getFieldWithDefault(msg, 10, 0),
    text: jspb.Message.getFieldWithDefault(msg, 11, ""),
    glyp: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Infovis.Geometry}
 */
proto.Infovis.Geometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Infovis.Geometry;
  return proto.Infovis.Geometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Infovis.Geometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Infovis.Geometry}
 */
proto.Infovis.Geometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFram(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIden(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMask(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCntsList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setPosxList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setPosyList(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setPoszList(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSize(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setColr(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGlyp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Infovis.Geometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Infovis.Geometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Infovis.Geometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Infovis.Geometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFram();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIden();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMask();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCntsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getPosxList();
  if (f.length > 0) {
    writer.writePackedDouble(
      6,
      f
    );
  }
  f = message.getPosyList();
  if (f.length > 0) {
    writer.writePackedDouble(
      7,
      f
    );
  }
  f = message.getPoszList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getSize();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getColr();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getGlyp();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional int32 fram = 1;
 * @return {number}
 */
proto.Infovis.Geometry.prototype.getFram = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Infovis.Geometry.prototype.setFram = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 iden = 2;
 * @return {number}
 */
proto.Infovis.Geometry.prototype.getIden = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Infovis.Geometry.prototype.setIden = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.Infovis.Geometry.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Infovis.Geometry.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 mask = 4;
 * @return {number}
 */
proto.Infovis.Geometry.prototype.getMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Infovis.Geometry.prototype.setMask = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated int32 cnts = 5;
 * @return {!Array<number>}
 */
proto.Infovis.Geometry.prototype.getCntsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.Infovis.Geometry.prototype.setCntsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Infovis.Geometry.prototype.addCnts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Infovis.Geometry.prototype.clearCntsList = function() {
  this.setCntsList([]);
};


/**
 * repeated double posx = 6;
 * @return {!Array<number>}
 */
proto.Infovis.Geometry.prototype.getPosxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array<number>} value */
proto.Infovis.Geometry.prototype.setPosxList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Infovis.Geometry.prototype.addPosx = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Infovis.Geometry.prototype.clearPosxList = function() {
  this.setPosxList([]);
};


/**
 * repeated double posy = 7;
 * @return {!Array<number>}
 */
proto.Infovis.Geometry.prototype.getPosyList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/** @param {!Array<number>} value */
proto.Infovis.Geometry.prototype.setPosyList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Infovis.Geometry.prototype.addPosy = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Infovis.Geometry.prototype.clearPosyList = function() {
  this.setPosyList([]);
};


/**
 * repeated double posz = 8;
 * @return {!Array<number>}
 */
proto.Infovis.Geometry.prototype.getPoszList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/** @param {!Array<number>} value */
proto.Infovis.Geometry.prototype.setPoszList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Infovis.Geometry.prototype.addPosz = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Infovis.Geometry.prototype.clearPoszList = function() {
  this.setPoszList([]);
};


/**
 * optional double size = 9;
 * @return {number}
 */
proto.Infovis.Geometry.prototype.getSize = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Infovis.Geometry.prototype.setSize = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional fixed32 colr = 10;
 * @return {number}
 */
proto.Infovis.Geometry.prototype.getColr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Infovis.Geometry.prototype.setColr = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string text = 11;
 * @return {string}
 */
proto.Infovis.Geometry.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Infovis.Geometry.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 glyp = 12;
 * @return {number}
 */
proto.Infovis.Geometry.prototype.getGlyp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.Infovis.Geometry.prototype.setGlyp = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


